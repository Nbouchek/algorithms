class BinaryGap {
   public int solution(int number) {
      int longestSequence = 0;
      int count = -1;
      int rightBit = 0;

      while (number > 0) {
         // get right most bit & shift right
         rightBit = number & 1;
         number = number >> 1;

         if (0 == rightBit && count >= 0) {
            count++;
         }

         if (1 == rightBit) {
            longestSequence = count > longestSequence ? count : longestSequence;
            count = 0;
         }
      }

      return longestSequence;
   }
}

public class BinaryGapDemo {
   public static void main(String[] args) {
      BinaryGap binaryGap = new BinaryGap();
      Integer integer = 657642;
      System.out.println("N = " + Integer.toBinaryString(integer) + ";\n Longest binaryGap = " + binaryGap.solution(integer));
   }
}
N = 10100000100011101010;
Longest binaryGap = 5

Here is a live Demo

Python

def solution(N):
    count = 0
    longest = 0
    found_one = False
 
    i = N    
         
    while i:
        if i & 1 == 1:
            if (found_one == False):
                found_one = True
            else:
                longest = max(longest,count)
            count = 0
        else:
            count += 1
        i >>= 1
    
    return longest

if __name__== "__main__":
    N = 657642
    print "N = " + "{0:b}".format(N) + "\nlongestGap = " + str(solution(N))
Output

N = 10100000100011101010 
longestGap = 5

Here is a live Demo

Complexity

Time	Space	Score
O(log(n))	O(1)	100%
